generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Cliente {
  id       Int      @id @default(autoincrement())
  nome     String
  email    String   @unique
  senha    String
  fotoUrl  String?
  telefone String?
  criadoEm DateTime @default(now())

  agendamentos Appointment[]
  avaliacoes   Review[]
  requests     Request[]
}

model Profissional {
  id            Int      @id @default(autoincrement())
  nome          String
  email         String   @unique
  senha         String
  bio           String?
  cidade        String
  bairro        String
  fotoUrl       String?
  fotoFrenteUrl String?
  fotoVersoUrl  String?
  telefone      String?
  especialidades Json?
  notaMedia     Float?   @default(0)
  criadoEm      DateTime @default(now())

  assinaturaAtual   Subscription? @relation("AssinaturaAtual", fields: [assinaturaAtualId], references: [id])
  assinaturaAtualId Int?          @unique

  agendamentos  Appointment[]
  avaliacoes    Review[]
  assinaturas   Subscription[] @relation("ProfissionalAssinaturas")
  usosCredito   CreditoUso[]   @relation("ProfissionalCreditoUsos")
  pedidosPaypal PedidoPaypal[]
}

model Admin {
  id       Int      @id @default(autoincrement())
  nome     String
  email    String   @unique
  senha    String
  criadoEm DateTime @default(now())
}

model Appointment {
  id             Int      @id @default(autoincrement())
  clienteId      Int
  profissionalId Int
  dataHora       DateTime
  local          String
  status         String   @default("pendente")

  cliente      Cliente      @relation(fields: [clienteId], references: [id])
  profissional Profissional @relation(fields: [profissionalId], references: [id])
}

model Review {
  id             Int      @id @default(autoincrement())
  clienteId      Int
  profissionalId Int
  requestId      Int? // <- Aqui adicionamos
  nota           Int
  comentario     String?
  criadoEm       DateTime @default(now())

  cliente      Cliente      @relation(fields: [clienteId], references: [id])
  profissional Profissional @relation(fields: [profissionalId], references: [id])
  request      Request?     @relation(fields: [requestId], references: [id])

  @@unique([clienteId, requestId])
}

enum TempoProjeto {
  NORMAL
  URGENTE
  PIQUETE
  AVARIA
}

enum StatusProjeto {
  ESPERA     // aguardando aprovação do admin
  ABERTO     // projeto aprovado
  CONCLUIDO  // profissional concluiu o serviço
}

model Request {
  id            Int      @id @default(autoincrement())
  clienteId     Int
  titulo        String
  descricao     String
  cidade        String
  bairro        String
  especialidade String
  creditos      Int?
  criadoEm      DateTime @default(now())
  status        StatusProjeto
  tempo         TempoProjeto
  contato       String

  usosCredito CreditoUso[]
  cliente     Cliente      @relation(fields: [clienteId], references: [id])
  reviews     Review[]
}

model Subscription {
  id                Int      @id @default(autoincrement())
  profissionalId    Int
  pacote            String // "Básico", "Profissional", etc.
  valorPago         Float
  creditosTotais    Int
  creditosRestantes Int
  dataInicio        DateTime @default(now())
  dataFim           DateTime
  status            String   @default("ativa") // ativa, expirada, cancelada, trocada
  criadoEm          DateTime @default(now())

  profissional                Profissional  @relation("ProfissionalAssinaturas", fields: [profissionalId], references: [id])
  usos                        CreditoUso[]
  profissionalAssinaturaAtual Profissional? @relation("AssinaturaAtual")
}

model CreditoUso {
  id             Int      @id @default(autoincrement())
  subscriptionId Int
  requestId      Int?
  profissionalId Int
  quantidade     Int
  criadoEm       DateTime @default(now())

  subscription Subscription @relation(fields: [subscriptionId], references: [id])
  request      Request?     @relation(fields: [requestId], references: [id])
  profissional Profissional @relation("ProfissionalCreditoUsos", fields: [profissionalId], references: [id])
}

model PedidoPaypal {
  id             Int      @id @default(autoincrement())
  orderId        String   @unique
  profissionalId Int
  pacote         String
  processado     Boolean  @default(false)
  criadoEm       DateTime @default(now())

  profissional Profissional @relation(fields: [profissionalId], references: [id])
}
model OtpCode {
  id        Int      @id @default(autoincrement())
  email     String
  code      String
  expiresAt DateTime
  createdAt DateTime @default(now())
}